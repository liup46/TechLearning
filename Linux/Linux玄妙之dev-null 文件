Linux玄妙之 /dev/null
参考链接:https://baijiahao.baidu.com/s?id=1712518976709206113&wfr=spider&for=pc
https://blog.csdn.net/weixin_44388689/article/details/120705959

## 1.摘要
1. /dev/null 在Linux中其实是一个空设备文件。文件的大小是0字节大小，
2.与普通文件的不同之处时， /dev/null 对于写入的东西通通扔掉。使用 cat 去读取这个文件，那么它只会返回文件终点（EOL: end of file）
3.所有人都有读写权限，没有执行权限,所以不能使用管道符 | 来接 /dev/null ，只能使用文件重定向（>, >> 或 <, <<）。
4. 将重定向和 /dev/null 结合起来，就可以帮助我们起到过滤输出的作用。如只关心命令正常执行的输出，忽略所有错误输出, 可以在命令后面这样重定向“2> /dev/null”, 如果你只关心报错内容，可以在命令后面这样重定向：> /dev/null
解释: > 所做的重定向是将标准输出到 /dev/null ,但是标准错误输出并没有被重定向到 /dev/null ; 要把标准错误输出重定向到 /dev/null ，使用标准错误输出（stderr）的文件描述符 2 来指代它，并对其重定向：notexistcmd 2> /dev/null
5. /dev/null 是个 character special files(字符特殊文件是一个能够让你访问 输入/输出 设备的文件。比如终端文件，NULL文件，文件描述符文件，系统控制台文件等。每个字符特殊文件都有一个设备大版本号，标识了设备类型；一个设备小版本号，标识了这个设备类型下的某个特定设备。字符特殊文件习惯上都定义在 /dev 中，这些文件通过 mknod 命令定义)


## 2.Linux中的标准输入输出,
* 0 是标准输入stdin，一般是从键盘获得输入
* 1 是标准输出stdout，一般是输出到屏幕了
* 2 是标准错误stderr，有时候屏幕上可以看到，但是重定向的文件中看不到的就是它了
* >为重定向符号
* /dev/null 2>&1 这条命令的意思就是在后台执行这个程序,并将错误输出2重定向到标准输出1,然后将标准输出1全部放到/dev/null文件,也就是清空.所以可以看出常用来避免shell命令或者程序等运行中有内容输出。

## 3.使用场景列举
#### 1.清除日志文件内容
cat /dev/null > /var/log/messages #  : > /var/log/messages   有同样的效果, 但不会产生新的进程.（因为:是内建的）
#### 2.禁止标准输出
cat $filename >/dev/null
#### 3.禁止标准错误
rm $badname 2>/dev/null
#### 4.禁止标准输出和标准错误的输出
cat $filename 2>/dev/null >/dev/null
#### 5. 丢掉所有输出
在 linux系统中，有个命令 nohup ，这个命令作用是在系统后台不挂断地运行命令，退出终端不会影响程序的运行。但是在默认情况下（非重定向时），会将日志内容输出到当前目录下一个名叫 nohup.out 的文件里面，那如果我不想要这些日志的内容怎么办，这时候就可以用到 dev/null，命令如下：
nohup java -jar app.jar > /dev/null 2>&1 &