//参考链接 https://github.com/caikelun/caikelun.github.io/blob/master/site/blog/2019-06-21-android-app-crash-capture-solution-xcrash.md
// # XCrash 的监控分析,尤其是anr 监听和native crash, 以及数据的收集
XCrash.init{
    if (params.enableJavaCrashHandler) {
            JavaCrashHandler.getInstance().initialize=>Thread.setDefaultUncaughtExceptionHandler(this)=>uncaughtException(Thread thread, Throwable throwable)
            =>handleException{
                //读取堆栈信息写入文件
                callback.onCrash(logFile)
            }
    }
    //通过FileObserver 监控目录“/data/anr/"下的 CLOSE_WRITE事件, 
    //1.收到事件后 遍历所有error state的进程,检查当前进程是否在NOT_RESPONDING 2.读trace文件的每一行并检查pid 是否是当前进程.3 是当前进程,写入文件然后callback.onCrash(logFile)
    //
    if (params.enableAnrHandler && Build.VERSION.SDK_INT < 21) 
        AnrHandler.getInstance().initialize

    if (params.enableNativeCrashHandler || (params.enableAnrHandler && Build.VERSION.SDK_INT >= 21)) {
        r = NativeHandler.getInstance().initialize{
            System.loadLibrary("xcrash"){
                JNI_OnLoad(JavaVM *vm)=>xc_common_set_vm(JavaVM *vm, JNIEnv *env, jclass cls = "NativeHandler"){
                    // 这里保留JavaVM,后续使用
                    xc_common_vm = vm; 
                    //创建NativeHandler的全局引用
                    xc_common_cb_class = (*env)->NewGlobalRef(env, cls);
                }
            }
            nativeInit()==>xc_jni.c.xc_jni_init{
                // 1. common init ,变量赋值
                xc_common_init{
                }
                // 2. 监听native crash
                if(crash_enable){ 
                    xc_crash_init{
                        xc_crash_init_callback(env){
                            //eventfd and a new thread for callback
                            if(0 > (xc_crash_cb_notifier = eventfd(0, EFD_CLOEXEC))) goto err;
                            //创建一个新的线程执行xc_crash_callback_thread函数,该函数会循环读等待xc_crash_cb_notifier的数据,收到数据后通知到 NativeHandler.traceCallback方法 
                            if(0 != pthread_create(&xc_crash_cb_thd, NULL, xc_crash_callback_thread, NULL)) goto err;
                        }


                        //注册新号处理函数    {.signum = SIGABRT}, {.signum = SIGBUS},{.signum = SIGFPE},{.signum = SIGILL},{.signum = SIGSEGV},{.signum = SIGTRAP},{.signum = SIGSYS},{.signum = SIGSTKFLT}
                        //收到信号后执行xc_crash_signal_handler函数
                        return xcc_signal_crash_register(xc_crash_signal_handler)==>xc_crash_signal_handler{
                            //创建子进程去执行xc_crash_exec_dumper 函数
                            pid_t dumper_pid = xc_crash_fork(xc_crash_exec_dumper)==>xc_crash_exec_dumper{
                                //这个函数首先通过 pipe 将一系列的参数，比如进程 pid ，崩溃线程 tid 等，写入到标准的输入当中，其目的是为了子进程从标准的输入当中去读取参数。然后通过 execl() 进入到真正的 dumper 程序
                                // 通过 execl() 来运行 libxcrash_dumper.so ,而 libxcrash_dumper.so 的入口在 xcd_core.c 中的 main() 。
                                //main里面的每一个过程就不再进行分析了，这里只说最重要的一点，其最核心的获取线程的 regs、backtrace 等信息是通过 ptrace 技术来获取的。
                                execl(xc_crash_dumper_pathname, XCC_UTIL_XCRASH_DUMPER_FILENAME, NULL);
                            }
                            ////wait the crash dumper process terminated
                            int wait_r = XCC_UTIL_TEMP_FAILURE_RETRY(waitpid(dumper_pid, &status, __WALL));
                            //JNI callback
                            xc_crash_callback(){
                                XCC_UTIL_TEMP_FAILURE_RETRY(write(xc_crash_cb_notifier, &data, sizeof(data)))
                                pthread_join(xc_crash_cb_thd, NULL);
                            }
                        }
                    }
                }
                // 3. 监听anr
                if(trace_enable) 
                {
                    //创建事件句柄
                    xc_trace_notifier = eventfd(0, EFD_CLOEXEC))
                    xc_trace_init(
                        xcc_signal_trace_register(xc_trace_handler){
                            //注册监听SIGQUIT 信号, 收到信号后调用xc_trace_handler 处理函数, 该函数往xc_trace_notifier 句柄写入int 1
                            sigaction(SIGQUIT, &act, &xcc_signal_trace_oldact)) ==> xc_trace_handler{
                                data = 1;
                                write(xc_trace_notifier, &data, sizeof(data)));
                            }
                        }
                        //创建一个线程去执行xc_trace_dumper 函数
                        pthread_create(&thd, NULL, xc_trace_dumper, NULL)==>xc_trace_dumper{
                            //通过上文xc_common_vm保存的 JavaVM attach到当前线程, AttachCurrentThread 方法是android ndk 提供的
                            (*xc_common_vm)->AttachCurrentThread(xc_common_vm, &env, &attach_args)
                            while(1){
                                //block here, waiting for sigquit, XCC_UTIL_TEMP_FAILURE_RETRY会不的循环读取xc_trace_notifier eventfd 直到有数据
                                XCC_UTIL_TEMP_FAILURE_RETRY(read(xc_trace_notifier, &data, sizeof(data)));
                                //create and open log file
                                if((fd = xc_common_open_trace_log(pathname, sizeof(pathname), trace_time)) < 0) continue;
                                //write header info
                                if(0 != xc_trace_write_header(fd, trace_time)) goto end;
                                if(0 != xcc_util_write_format(fd, XCC_UTIL_THREAD_SEP"Cmd line: %s\n", xc_common_process_name)) goto end;
                                if(0 != xcc_util_write_str(fd, "Mode: ART DumpForSigQuit\n")) goto end;

                                //write trace info from ART runtime
                                //这里很关键, dump 运行时的错误信息
                                xc_trace_load_symbols(){
                                    //根据不通的版本, 打开不同的libc++.so, 注意这里不同的版本文件不一样,新版本就可能会有兼容问题呀
                                    // xc_dl_create 函数: 
                                    // 1. 遍历/proc/self/maps 的每一行得到 查找libc++.so文件在内存代码段的基址 2.打开libc++.so 文件并mmap到内存,3.然后读Elf格式文件的所有符号表
                                    if(xc_common_api_level >= 29) libcpp = xc_dl_create(XCC_UTIL_LIBCPP_APEX); //“apex/com.android.runtime/lib/libc++.so”
                                    if(NULL == libcpp && NULL == (libcpp = xc_dl_create(XCC_UTIL_LIBCPP))) goto end; // "/system/lib/libc++.so"
                                    //xc_dl_sym函数:  遍历libc++的符号表 找到symbol “ _ZNSt3__14cerrE ” = cerr 的内存指针, 赋值给xc_trace_libcpp_cerr
                                    if(NULL == (xc_trace_libcpp_cerr = xc_dl_sym(libcpp, XCC_UTIL_LIBCPP_CERR))) goto end;
                                    
                                    //打开"/apex/com.android.art/lib/libart.so" 文件,映射到内存,解析出所有符号表
                                    if(xc_common_api_level >= 30) 
                                        libart = xc_dl_create(XCC_UTIL_LIBART_APEX_30);  //"/apex/com.android.art/lib/libart.so"
                                    else if(xc_common_api_level == 29) 
                                        libart = xc_dl_create(XCC_UTIL_LIBART_APEX_29); //"/apex/com.android.runtime/lib/libart.so"
                                    if(NULL == libart && NULL == (libart = xc_dl_create(XCC_UTIL_LIBART))) goto end; //"/system/lib/libart.so"
                                    // 遍历 libart的符号表 找到symbol “ _ZN3art7Runtime9instance_E ” = RUNTIME_INSTANCE 的内存指针            
                                    if(NULL == (xc_trace_libart_runtime_instance = (void **)xc_dl_sym(libart, XCC_UTIL_LIBART_RUNTIME_INSTANCE))) goto end;
                                    //找到symbol _ZN3art7Runtime14DumpForSigQuitERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE = RUNTIME_DUMP 内存指针
                                    if(NULL == (xc_trace_libart_runtime_dump = (xcc_util_libart_runtime_dump_t)xc_dl_sym(libart, XCC_UTIL_LIBART_RUNTIME_DUMP))) goto end;
                                }
                                //检查上文所有符号地址是否合法, 这个检查是Not reliable
                                xc_trace_check_address_valid()
                                //duplicate FD 重定向错误输出到 上文创建到FD
                                dup2(fd, STDERR_FILENO) 
                                xc_trace_dump_status = XC_TRACE_DUMP_ON_GOING;
                                if(sigsetjmp(jmpenv, 1) == 0) 
                                {
                                    if(xc_trace_is_lollipop)
                                        xc_trace_libart_dbg_suspend();
                                    //这里用xc_trace_libart_runtime_dump的指针在 xc_trace_libart_runtime_instance 上执行dump 内存
                                    xc_trace_libart_runtime_dump(*xc_trace_libart_runtime_instance, xc_trace_libcpp_cerr);
                                    if(xc_trace_is_lollipop)
                                        xc_trace_libart_dbg_resume();
                                } 
                                //重置
                                dup2(xc_common_fd_null, STDERR_FILENO);

                            skip:
                                if(0 != xcc_util_write_str(fd, "\n"XCC_UTIL_THREAD_END"\n")) goto end;
                        
                                //write other info logcat, 执行命令/system/bin/logcat -b %s -d -v threadtime -t 
                                if(0 != xcc_util_record_logcat(fd, xc_common_process_id, xc_common_api_level, xc_trace_logcat_system_lines, xc_trace_logcat_events_lines, xc_trace_logcat_main_lines)) goto end;
                                if(xc_trace_dump_fds)
                                    //读"/proc/%d/fd" 的所有文件 fd
                                    if(0 != xcc_util_record_fds(fd, xc_common_process_id)) goto end;
                                if(xc_trace_dump_network_info)
                                    //读/proc/%d/net/tcp, /proc/%d/net/tcp6", /proc/$pid/net/udp 等文件的信息
                                    if(0 != xcc_util_record_network_info(fd, xc_common_process_id, xc_common_api_level)) goto end;
                                //读/proc/$pid/smaps 等信息
                                if(0 != xcc_meminfo_record(fd, xc_common_process_id)) goto end;
                            end:
                                //close log file
                                xc_common_close_trace_log(fd);
                                //rethrow SIGQUIT to ART Signal Catcher
                                if(xc_trace_rethrow && (XC_TRACE_DUMP_ART_CRASH != xc_trace_dump_status)) xc_trace_send_sigquit();
                                xc_trace_dump_status = XC_TRACE_DUMP_END;
                        
                                //JNI callback  执行NativeHandler.traceCallback方法 , callback这里有会获取java 的内存信息
                                if(NULL == xc_trace_cb_method) continue;
                                if(NULL == (j_pathname = (*env)->NewStringUTF(env, pathname))) continue;
                                (*env)->CallStaticVoidMethod(env, xc_common_cb_class, xc_trace_cb_method, j_pathname, NULL);
                                XC_JNI_IGNORE_PENDING_EXCEPTION();
                                (*env)->DeleteLocalRef(env, j_pathname);
                            }
                            (*xc_common_vm)->DetachCurrentThread(xc_common_vm);
                        }
                    }
                }
        }
}

## 其他补充资料
Native 崩溃发生在机器指令运行的层面。比如：APP 中的 so 库、系统的 so 库、JVM 本身等等。Linux kernel 就会向 APP 中对应的线程发送相应的信号（signal），这些信号的默认处理方式是杀死整个进程。用户态进程也可以发送 signal 终止其他进程或自身。
这些致命的信号分为 2 类，主要有：

* kernel 发出的
**    SIGFPE: 除数为零。
**    SIGILL: 无法识别的 CPU 指令。
**    SIGSYS: 无法识别的系统调用（system call）。
**    SIGSEGV: 错误的虚拟内存地址访问。
**    SIGBUS: 错误的物理设备地址访问。
* 用户态进程发出的
**    SIGABRT: 调用 abort() / kill() / tkill() / tgkill() 自杀，或被其他进程通过 kill() / tkill() / tgkill() 他杀。

### 信号处理函数
Naive 崩溃捕获需要注册这些信号的处理函数（signal handler），然后在信号处理函数中收集数据。

因为信号是以“中断”的方式出现的，可能中断任何 CPU 指令序列的执行，所以在信号处理函数中，只能调用“异步信号安全（async-signal-safe）”的函数。例如malloc()、calloc()、free()、snprintf()、gettimeofday() 等等都是不能使用的，C++ STL / boost 也是不能使用的。

所以，在信号处理函数中我们只能不分配堆内存，需要使用堆内存只能在初始化时预分配。如果要使用不在异步信号安全白名单中的 libc / bionic 函数，只能直接调用 system call 或者自己实现。

### 进程崩溃前的极端情况
当崩溃捕获逻辑开始运行时，会面对很多糟糕的情况，比如：栈溢出、堆内存不可用、虚拟内存地址耗尽、FD 耗尽、Flash 空间耗尽等。有时，这些极端情况的出现，本身就是导致进程崩溃的间接原因。

#### 栈溢出
我们需要预先用 sigaltstack() 为 signal handler 分配专门的栈内存空间，否则当遇到栈溢出时，signal handler 将无法正常运行。

#### 虚拟内存地址耗尽
内存泄露很容易导致虚拟内存地址耗尽，特别是在 32 位环境中。这意味着在 signal handler 中也不能使用类似 mmap() 的调用。

####  FD 耗尽
FD 泄露是常见的导致进程崩溃的间接原因。这意味着在 signal handler 中无法正常的使用依赖于 FD 的操作，比如无法 open() + read() 读取/proc 中的各种信息。为了不干扰 APP 的正常运行，我们仅仅预留了一个 FD，用于在崩溃时可靠的创建出“崩溃信息记录文件”。

####  Flash 空间耗尽
在 16G / 32G 存储空间的安卓设备中，这种情况经常发生。这意味着 signal handler 无法把崩溃信息记录到本地文件中。我们只能尝试在初始化时预先创建一些“占坑”文件，然后一直循环使用这些“占坑”文件来记录崩溃信息。如果“占坑”文件也创建失败，我们需要把最重要的一些崩溃信息（比如 backtrace）保存在内存中，然后立刻回调和发送这些信息。